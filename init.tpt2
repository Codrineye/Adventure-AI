:import adventure_lib
:name {package(init)}

:budget_cap max
; minimum budget cap is 200, but because key.{kill} lets us buy
; 
; minimum budget cap so that init can quit in 1 frame

;
:local bool parity
:local bool needs_something
:local bool skipped

; 
:local double maxDifficultyInit
:local double difficulty
; 

;
:local string market_data
:local string exit_dir
:local string dir
;
:local vector curPos


key.{reinit}()
; reinitialize maxDifficulty
; 
key.{start}()
; Toggle the script state
; 
key.{up}()
key.{down}()
; Increment/Decrement maxDifficulty by 1
; 
key.{kill}()
; Shut down the AI and enters farm keys to
; top us off, then, it terminates the program

isopen("arcade")


; Square pattern
; RULDRU
; pos = if(\
  x(adventure.playerCoords()) == if(pos % 4 >= 2, 127 - i, 127 + i) &&\
  y(adventure.playerCoords()) == if(\
    pos > 2, \
    min(127 + i, 127 + i * (pos % 5)), \
    max(127 - i, 127 - i * (pos % 5))\
  ), \
  (pos + 1) % 6, \
  pos\
)
; direction = sub("RULD", pos % 4, 1)


; diamond pattern
; Player spawns in the middle of the map at 127.0, 127.0
; going R = x + 1.0
; going U = y + 1.0
; going L = x - 1.0
; going D = y - 1.0
#nextRoomLower if(\
  x(adventure.roomCoords()) < 127.0 && \
  y(adventure.roomCoords()) >= 127.0,\
  "R",\
  if(\
    x(adventure.roomCoords()) >= 127.0 && \
    y(adventure.roomCoords()) > 127.0,\
    "D",\
    if(\
      x(adventure.roomCoords()) > 127.0 && \
      y(adventure.roomCoords()) <= 127.0,\
      "L",\
      "U" \
    )\
  )\
)
#rotateLeft(x) sub("LDRU", index("ULDR", {x}, 0), 1)
; Conditionally rotate the direction "x" to the left.
; The benefit of this macro is that it only expands "x" once.
#condRotateLeft(cond, x) sub(\
  if({cond}, "LDRU", "ULDR"), \
  index("ULDR", {x}, 0), \
  1\
)

#count.entities(entity) adventure.countEntities("{entity}")
; helper macro to shorten the process for counting entities

; ======== Start init code ==============

; This exists as a local variable solely to provide users
; an easy place to customize it, after it's been imported.
maxDifficultyInit = 81.0

; can replace previous init with this to imitate a full completion
;maxDifficultyInit = {cur_difficulty(1.0)}

; Initialize all our global variables.
; 
; Store our target positions.
; It starts a hiding block ended when setting maxDiff
{target.setPos({target.getPositions})}

; 
; Change the state of the script.
; If we use key.{kill}, our state must be off, otherwise
; try to toggle our state.
{state.set(\
  impulse() != "key.{kill}" && \
  {state.get} != (impulse() == "key.{start}")\
)}

; hide the path
; Overwrite its value if we're shut down
{path.set(if({state.get}, {path.get}, ""))}

; 
; Make sure that maxDifficulty is at least 2.
; if it's 1 it gets stuck in an endless loop
; in the starting room for some reason
; 
; Additionally, end the hiding block started by target_pos_var
{maxDiff.set(if(\
  {maxDiff.get} < 2.0 || impulse() == "key.{reinit}",\
  max(2.0, maxDifficultyInit),\
  if(\
    contains("key.{start}|key.{kill}", impulse()),\
    {maxDiff.get},\
    if(\
      impulse() == "key.{up}", \
      {maxDiff.get} + 1.0,\
      max(2.0, {maxDiff.get} - 1.0)\
    )\
  )\
))}

goto(if(\
  impulse() == "key.{kill}" ||\
  impulse() == "key.{start}" && {state.get}, \
  start, \
  end\
))

; ======== Continuous loop code ==============


#can_leech adventure.hasItem("leechSword")
#can_cast adventure.hasItem("bookSpells")
#has_reaver adventure.hasItem("manaReaver")

#needs_bombs adventure.bombs() < 99 && difficulty >= 80.0 && {can_leech}
#needs_health adventure.playerHealth() < 99 && {can_leech}
#needs_armor adventure.manaArmor() < adventure.playerArmor() && {can_cast}
#needs_mana adventure.mana() < 99 && {has_reaver} && {can_cast}
#needs_keys adventure.keys() <= 10

#any_needs {needs_bombs} || {needs_health} || {needs_mana} || {needs_keys}

#num_enemies round(difficulty * 0.1 + 3.0)

; calculate how much health an elite has
#elite_health d2i(floor(difficulty * 0.01 + 1.0))
; 
; calculate how much damage an elite deals
#elite_dmg d2i(ceil(ceil(difficulty * 0.39) * 1.5))
; 
; calculate how much damage an elite will actually deal to us
#elite_trueDMG {elite_health} * ({elite_dmg} - adventure.playerArmor())

#player_health adventure.playerHealth() + adventure.manaArmor()

next:
; partity is in charge of making sure we never exit farm keys until
; we're back in the room we started in
parity = not(parity)

{path.set(exit_dir)}
executesync("{package(follow path)}")

start:
difficulty = {cur_difficulty(0.0)}

gotoif(skip_mana, {needs_bombs})
mana_loop:
adventure.useSpell("manaArmor")
gotoif(mana_loop, {needs_armor} && adventure.mana() >= 5)
skip_mana:

needs_something = {survivable(difficulty)} && ({any_needs})\
  && adventure.playerHealth() > 0

; " U   L   R   D   " = "X{dir_spaced(3)}"
; " 918 09  189 90  "
:const string exit_coord " 918 09  189 90  "
#exit_concat x(adventure.playerPos()) . y(adventure.playerPos())
exit_dir = sub("X{dir_spaced(3)}", index(exit_coord, {exit_concat}, 0), 1)
; get our exit direction

; We are skipped if we have a valid exit direction and:
; - there are multiple elites while we don't need bombs and
;   we can't clear the entire room with our hp
; or
; - there are more elites in the room and we won't survive killing all of them
; or
; - our needs are met but we're not in the same room we started in
skipped = contains("ULRD", exit_dir) && (\
  (adventure.countEntities("Elite") > 0) != \
  (needs_something && {needs_bombs}) && (\
    adventure.countEntities("Elite") > 0 || \
    {player_health} > 100 - d2i({num_enemies} * 1.8)\
  ) || (\
    adventure.countEntities("Elite") > 0 && \
    {player_health} <= {elite_trueDMG}\
  ) || (parity && not(needs_something))\
)

goto(if(skipped, next, killer_loop))

; Start of kill enemies

#enemyInDir(x, y) adventure.isEnemy(adventure.playerPos() + vec({x},{y}))
; Check if an enemy is in the inputed direction

; Move in the enemies direction
#enemyDirection if({enemyInDir(0.0, 1.0)}, vec(0.0, 1.0),\
                if({enemyInDir(1.0, 0.0)}, vec(1.0, 0.0),\
                if({enemyInDir(0.0,-1.0)}, vec(0.0,-1.0),\
                if({enemyInDir(-1.0, 0.0)}, vec(-1.0, 0.0), \
                vec(0.0, 0.0)))))

; check if there are any enemies next to the player
#anyEnemies {enemyInDir(0.0, 1.0)} || {enemyInDir( 0.0,-1.0)} ||\
            {enemyInDir(1.0, 0.0)} || {enemyInDir(-1.0, 0.0)}

killer_wait:
adventure.wait()
; wait in our curent position

attack:
waitframe()
adventure.move({enemyDirection})
; move towards the enemy to attack it
; wait frame is needed here to handle invalid (0, 0) movements

killer_loop:
goto(if(\
  isopen("arcade") && {state.get} || impulse() == "key.{kill}",\
  if(\
    max({count.entities(Enemy)}, {count.entities(Elite)}) > 0,\
    if({anyEnemies}, attack, killer_wait),\
    if(\
      contains("ULRD", exit_dir) &&\
        (parity || needs_something && ({any_needs})),\
      next,\
      if(impulse() == "key.{kill}", end, main_loop)\
    )\
  ),\
  end\
))

main_loop:
; We check based on current difficulty plus 1,
; because it's more efficient that way.
difficulty = {cur_difficulty(1.0)}

; This line is responsible for maxDifficulty "creeping" upwards.
; When used properly, it will cause the AI to slowly make spirals that cover
; (nearly) the entire maze. However, extra lines can "trick" it and
; cause it to jump more difficulty levels than wanted.
;
; Note the check against current difficulty
; (which is current_difficulty + 1 here), which prevents this from
; triggering multiple times before the AI can travel to new rooms.
;
; if the room isn't clear or we've just woken up, we don't change maxDiff
; otherwise, if we can survive the next difficulty, we increment by 2, if not, we decrement by 2
; 
{maxDiff.set({maxDiff.get} + if(\
  difficulty <= {maxDiff.get} || {count.entities(Chest)} > 0 || dir == "",\
  0.0,\
  if({survivable(difficulty)}, 2.0, -2.0)\
))}

dir = if(\
  difficulty != 1.0 || dir == "",\
  {condRotateLeft({survivable(difficulty)}, {nextRoomLower})},\
  {rotateLeft(dir)}\
)

; Buy the first market item in our priority list that we don't have.
; We don't need to worry about checking for the market or
; available emeralds if we can't buy the item, we'll simply fail
; to purchase and continue on.

; This Lua macro constructs a data table that is used to iterate over
; the items efficiently. The encoding is length-2 size, length-3 position,
; and variable-length data. The size and position are for locating the
; *next* item.
#data_table {lua(\
  local market = {};\
  local items = table.pack(\
    "impaler", "hammer", "bootsPhasing",\
    "leechSword", "manaReaver", "thornsArmor", \
    "holyBomb", "eodArmor", "bookSpells"\
  );\
  for item = 1, #items do\
    market[item * 3] = items[item];\
  end\
  local pos = 0;\
  for item = 1, #items do\
    local offset = item * 3;\
    pos = pos + 5 + #market[offset];\
    local next_item = #(market[offset + 3] or "");\
    market[offset - 2] = string.format("%02d", 5 + next_item);\
    market[offset - 1] = string.format("%03d", pos)\
  end\
  return table.concat(market)\
)}

market_loop:
market_data = sub(\
  "{data_table}",\
  s2i(sub(market_data, 2, 3), 0),\
  s2i(sub(market_data, 0, 2), 12)\
)

; Loop until we find an unbought item. By the nature of hasItem, it will
; always return false for the empty string at the end of the loop, so we
; don't need an explicit end check.
goto(if(\
  isopen("arcade") && {state.get},\
  if(adventure.hasItem(sub(market_data, 5, 99)), market_loop, buy),\
  end\
))

buy:
adventure.buyMarketItem(sub(market_data, 5, 99))

; Turn our room direction into a target exit via lookup-table.
; "XU    L    R    D    " = "X{dir_spaced(4)}"
; " 0918 0009 1809 0900"
:const string exit_idx " 0918 0009 1809 0900"
{target.setPos(sub(exit_idx, index("X{dir_spaced(4)}", dir, 0), 4) . ":")}

executesync("{package(movement)}")

{path.set(dir)}
executesync("{package(follow path)}")

gotoif(start, {state.get} && adventure.playerHealth() > 0)

end:
; We reach the end 
; 
; We're here if a filler action was used ({up}{down}{reinit}) or if we've shut down
; {state.get} is false if the impulse was {kill} or {start} toggled us off
; If the cause of the shut down was from an impulse, we don't need to change our state
; However, if the player left adventure (exited arcade or entered another tab like lucky wheel),
; then, we have to shut down, as we can no longer interact with adventure.
; 
; 
{state.set({state.get} && adventure.playerHealth() > 0)}
