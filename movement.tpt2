:import adventure_lib
:name {package}:movement

:budget_cap 200

:local bool waitChest
:local bool cantPhase
:local bool path_search
; 
:local int stepCount
:local int counter
; 
:local string path

:local string dir
:local string idx
:local string queue
:local string target
:local string targetPos
:local string lootPositions
; 
:local vector curPos
:local vector nextMove


; There are 2 types of fields.
; 1. The `analyze loot` field, which is used to
;    detect where in the map loot can be found
;    encoded as lss("f" . index)
; 2. The `find path` field, which is used
;    to build the path to our target.
;    encoded as lss("f" . target . index)
;    where target is the target position we're trying to reach


#setField(index, target, field) lss("f" . {target} . {index}, {field})
#getField(index, target) lsg("f" . {target} . {index})

#setTPos(index, pos) lss("t" . {index}, {pos})
#getTPos(index) lsg("t" . {index})

cantPhase = not(adventure.hasItem("bootsPhasing"))\
|| 0 < max(\
  max(\
    adventure.countEntities("Elite"),\
    adventure.countEntities("Chest")\
  ),\
  adventure.countEntities("Enemy")\
)

stepCount = 0
; Reset stepCount

; Set our target to empty if
; cantPhase is true and path_search is false
; otherwise, we get our first target position

target = if(\
  not(cantPhase) || path_search,\
  sub({target.getPositions}, 0, 4),\
  ""\
)

queue = {vecToString(adventure.playerPos())} . "S:"

; On the first entry of this loop, the junk entry "_f" will be set to "S".
; This has no effect. In general, lootPositions, queue and setField are
; protected so that if the field has already been set,
; we won't take action again.

loop1:
curPos = {firstElementPos}
idx = sub(queue, 0, 4)

; Add a position if it's not been processed and if it has a chest in it
; this value is only relevant when we're analyzing loot, so the target
; will always be an empty string
lootPositions = if(\
  {getField(idx, "")} == "" && \
  adventure.entityType(curPos) == "Chest",\
  {vecToString(curPos)} . ":" . lootPositions,\
  lootPositions\
)

{setField(\
  if({getField(idx, target)} != "", "", idx), \
  target, \
  {firstElementDir}\
)}

; If we've not added a position, pop the processed position
; otherwise, pop the processed position and look at
; the neighbouring 4 positions and
; add all non-wall positions to the queue
queue = if(\
  {getField(idx, target)} != {firstElementDir} || adventure.playerAttack() <= 0,\
  sub(queue, 6, 99999),\
  sub(queue, 6, 99999) . if(\
    adventure.isWall(curPos + vec(0.0, 1.0)) && cantPhase\
    || max(x(curPos), y(curPos)) >= 18.0\
    || x(curPos) < 1.0,\
    "",\
    {posToString(x(curPos), y(curPos) + 1.0)} . "U:"\
  ) . if(\
    adventure.isWall(curPos + vec(0., -1.0)) && cantPhase\
    || min(x(curPos), y(curPos)) < 1.0\
    || x(curPos) >= 18.0,\
    "",\
    {posToString(x(curPos), y(curPos) - 1.0)} . "D:"\
  ) . if(\
    adventure.isWall(curPos + vec(1.0, 0.0)) && cantPhase\
    || max(x(curPos), y(curPos)) >= 18.0\
    || y(curPos) < 1.0,\
    "",\
    {posToString(x(curPos) + 1.0, y(curPos))} . "R:"\
  ) . if(\
    adventure.isWall(curPos + vec(-1.0, 0.0)) && cantPhase\
    || min(x(curPos), y(curPos)) < 1.0\
    || y(curPos) >= 18.0,\
    "",\
    {posToString(x(curPos) - 1.0, y(curPos))} . "L:"\
  )\
)

; keep looping until we've encoded every tile we need
; if we're here to calculate `find path`, we have to enter
; l2start to start loop 2, otherwise, we continue over
; to add our target positions
goto(if(\
  queue != "" && idx != target,\
  loop1,\
  if(not(cantPhase) || path_search, l2start, continue)\
))

continue:
lootPositions = {target.getPositions} . lootPositions
; add the loot positions to our target positions

loot_loop:
targetPos = sub(lootPositions, 0, 4)
; get the next loot position

curPos = {strToVec(targetPos)}
; set our curPos to our position

lootPositions = sub(lootPositions, 5, 99999)
; pop the previous loot position

innerLoot_loop:
idx = {vecToString(curPos)}
; stringify our curPos to access our fields


; insert our loot positions into our target_positions
; 
; make our loot position the head if it can be accessed by our start and
; it hasn't already been added to the target_positions
; 
; otherwise, don't insert if the target position hasn't been recorded yet
; or if it has already been inserted in our target_positions
; 
; otherwise, insert a step to reach our loot position?
#next_vector curPos - {nextDir({getField(idx, "")})}
{target.setPos(if(\
  {getField({vecToString({next_vector})}, "")} == "S" && \
  not(contains({target.getPositions}, targetPos)),\
  targetPos . ":" . {target.getPositions},\
  if(\
    {getTPos(idx)} == "" || \
    contains({target.getPositions}, targetPos),\
    {target.getPositions},\
    sub(\
      {target.getPositions},\
      0,\
      index({target.getPositions}, {getTPos(idx)}, 0)\
    ) . targetPos . ":" . sub(\
      {target.getPositions},\
      index({target.getPositions}, {getTPos(idx)}, 0),\
      9999\
    )\
  )\
))}

; set a target position if it hasn't been added to the target_positions
; or overwrite the target position if its contents
; is with target positions?
{setTPos(idx, if(\
  {getTPos(idx)} != sub(\
    {target.getPositions},\
    index({target.getPositions}, targetPos, 0) + 5,\
    4\
  ) && contains({target.getPositions}, targetPos),\
  {getTPos(idx)},\
  targetPos\
))}

; Update our curPos to the next tile
; 
; We're actually working backwards, from the desired loot position back to
; our starting position, so this "next tile" is a
; tile closer to the player
; 

curPos -= {nextDir({getField(idx, "")})}
; return to the innerLoop2 if we've not made
; our way back to the starting position if we have,
; move back to loop2 if there's more loot positions to add
goto(if(\
  {getField({vecToString(curPos)}, "")} != "S",\
  innerLoot_loop,\
  if(lootPositions != "", loot_loop, end)\
))

loop2:
path = dir . path
curPos -= {nextDir(dir)}
idx = {vecToString(curPos)}

l2start:
dir = {getField(idx, target)}
goto(if(dir == "S", start, loop2))

#has_hammer adventure.hasItem("hammer")

#curDirection sub(path, stepCount, 1)
#insert(st,i,val) sub({st},0,{i}) . ({val}) . sub({st},{i},99999)
#escapeDirection if(\
  adventure.entityType(curPos + vec(0.0, 1.0)) == ""\
    && adventure.entityType(curPos + vec(0.0, 2.0)) == ""\
    && not(adventure.isWall(curPos + vec(0.0, 1.0)))\
    && y(curPos) < 17.0,\
  "BUUWDD",\
  if(\
    adventure.entityType(curPos + vec(0.0, -1.0)) == ""\
      && adventure.entityType(curPos + vec(0.0, -2.0)) == ""\
      && not(adventure.isWall(curPos + vec(0.0, -1.0)))\
      && y(curPos) > 1.0,\
    "BDDWUU",\
    if(\
      adventure.entityType(curPos + vec(-1.0, 0.0)) == ""\
        && adventure.entityType(curPos + vec(-2.0, 0.0)) == ""\
        && not(adventure.isWall(curPos + vec(-1.0, 0.0)))\
        && x(curPos) > 1.0,\
      "BLLWRR",\
      "BRRWLL"\
    )\
  )\
)

rock:
path = {insert(\
  path,\
  stepCount,\
  if(adventure.hasItem("eodArmor"), "BWWW", {escapeDirection})\
)}
stepCount += if(adventure.hasItem("eodArmor"), 4, 6)

nextTile:
curPos = curPos + {nextDir({curDirection})}
stepCount = stepCount + 1

#move_dir adventure.entityType(curPos + {nextDir({curDirection})})
start:
goto(if(\
  isopen("arcade") && {state.get},\
  if(\
    len(path) <= stepCount,\
    start_following,\
    if({move_dir} != "Rock" || {has_hammer}, nextTile, rock)\
  ),\
  end\
))

#nextTile adventure.entityType(adventure.playerPos() + nextMove)

bomb:
adventure.placeBomb()
goto(move)

wait:
adventure.wait()

move:
path = sub(path, 1, 18 * 18 * 9)

start_following:
curPos = adventure.playerPos()
nextMove = {nextDir(sub(path, 0, 1))}
waitChest = {nextTile} == "Chest"
counter = 0

move2:
waitframe()
adventure.move(nextMove)
; This is a no-op for invalid (0,0) moves

counter += 1

gotoif(\
  if(\
    sub(path, 0, 1) == "B",\
    bomb,\
    if(\
      sub(path, 0, 1) == "W",\
      wait,\
      if(\
        waitChest && {nextTile} == ""\
        || x(curPos) != x(adventure.playerPos())\
        || y(curPos) != y(adventure.playerPos())\
        || counter >= 15,\
        move,\
        move2\
      )\
    )\
  ),\
  {state.get} && isopen("arcade") && path != ""\
)

{target.setPos(sub({target.getPositions}, 5, 9999))}

end:
path_search = true
; Set to true so we can reuse the top of the script
; 
; keep looping until we no longer have any target positions
gotoif(0, isopen("arcade") && {state.get} && {target.getPositions} != "")
