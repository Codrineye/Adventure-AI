:import adventure_lib
:name {package}:refine path

:budget_cap max

:global string leon.adventure.path

:local vector curPos
:local int stepCount

#has_hammer adventure.hasItem("hammer")

#curDirection sub(leon.adventure.path, stepCount, 1)
#insert(st,i,val) sub({st},0,{i}) . ({val}) . sub({st},{i},99999)
#escapeDirection if(\
  adventure.entityType(curPos + vec(0., 1.)) == ""\
    && adventure.entityType(curPos + vec(0., 2.)) == ""\
    && not(adventure.isWall(curPos + vec(0., 1.)))\
    && y(curPos) < 17.0,\
  "BUUWDD",\
  if(\
    adventure.entityType(curPos + vec(0., -1.)) == ""\
      && adventure.entityType(curPos + vec(0., -2.)) == ""\
      && not(adventure.isWall(curPos + vec(0., -1.)))\
      && y(curPos) > 1.0,\
    "BDDWUU",\
    if(\
      adventure.entityType(curPos + vec(-1., 0.)) == ""\
        && adventure.entityType(curPos + vec(-2., 0.)) == ""\
        && not(adventure.isWall(curPos + vec(-1., 0.)))\
        && x(curPos) > 1.0,\
      "BLLWRR",\
      "BRRWLL"\
    )\
  )\
)

curPos = adventure.playerPos()
goto(start)

rock:
leon.adventure.path = {insert(\
  leon.adventure.path,\
  stepCount,\
  if(adventure.hasItem("eodArmor"), "BWWW", {escapeDirection})\
)}
stepCount += if(adventure.hasItem("eodArmor"), 4, 6)

nextTile:
curPos = curPos + {nextDir({curDirection})}
stepCount = stepCount + 1

#move_dir adventure.entityType(curPos + {nextDir({curDirection})})
start:
gotoif(\
  if(\
    {move_dir} != "Rock" || {has_hammer},\
    nextTile,\
    rock\
  ),\
  stepCount < len(leon.adventure.path)\
)
end:
