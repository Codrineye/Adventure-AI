#package Adventure v3.3.9

; key assignment macros
#start r
#reinit i
; 
#up u
#down j
; 
#kill k

; lua macro that makes sure the export code doesn't have
; duplicate impulse keys.
{lua(\
  local imp = {};\
  local keys = "{start}|{reinit}|{up}|{down}|{kill}|";\
  for word in keys:gmatch("[^|]+") do\
    if imp[word] then error("key. impulses can't have duplicates", 0) end\
    imp[word] = 1;\
  end\
)}

; 
; a string holding our direction sequence
#dir_list "ULRD"

; macro that returns a spaced out version of our dir_list
; requires the ammount of spaces, a negative input
; returns spaces before the direction
; 01 => "R "
; -1 => " R"
#dir_spaced(space) {lua(\
  local directions = {};\
  local space = {space} < 0 and 1 - {space} or -1 - {space};\
  local spacer = "%" .. space .. "s";\
  for i = 1, #{dir_list} do\
    directions[i] = spacer:format(string.sub({dir_list}, i, i));\
  end\
  return table.concat(directions);\
)}

; The name of the variable that stores "target positions" state.
; Doubles as the start of the variable-hiding block.
:const string target_pos_var "<size=0>adv.target_pos"
#target.getPositions global.string.get(target_pos_var)
#target.setPos(position) global.string.set(target_pos_var, {position})

; The state of the script.
:const string state "leon.adventure.running"
#state.get global.bool.get(state)
#state.set(value) global.bool.set(state, {value})

; Convert a coordinate into stringified form.
#coordToString(coord) sub(d2s(200.0 + ({coord})), 1, 2)
; Convert a vector that has been pre-split into its two components into
; stringified form. This only works for non-negative numbers.
#posToString(x, y) {coordToString({x})} . {coordToString({y})}

; Split a vector into its 2 components to be processed by posToString
#vecToString(vector) {posToString(x({vector}), y({vector}))}

; Convert a string to a coordinate.
#strToCoord(str, offset) s2d(sub({str}, {offset}, 2), -1.0)

; Convert a length-4 stringified vector to vector form.
; This evaluates str twice, so that should be a small expression.
; This *will* work with negative values, if they're small enough.
#strToVec(str) vec({strToCoord({str},0)}, {strToCoord({str},2)})

; Macros for working with BFS queues. The queue is structured as a
; length-4 stringified position followed by a length-1 direction.
#firstElementPos {strToVec(queue)}
#firstElementDir sub(queue, 4, 1)

; Calculate the difficulty of the room the player is in.
; This formulation is a bit harder to follow than the traditional one
; that uses absolute values, but it require fewer operations.
;
; This takes a parameter "offset", which is added to the difficulty.
; This exists because it can be constant-folded in to this calculation,
; whereas if we add it later it's a separate addition.
#cur_difficulty(offset) (\
  max(\
    254. - x(adventure.roomCoords()),\
    x(adventure.roomCoords())\
  ) + max(\
    254. - y(adventure.roomCoords()),\
    y(adventure.roomCoords())\
  ) + ({offset} - 254.)\
)

; Calculate if the given difficulty (i.e. distance) is "survivable",
; i.e. can be cleared automatically without taking damage. This includes
; comparing against maxDifficulty, which technically doesn't affect your
; ability to survive, but does determine how the AI chooses rooms.
#survivable(difficulty) (\
  {difficulty} < 100.0 || \
  adventure.hasItem("lantern")\
) && leon.adventure.maxDifficulty >= {difficulty} && (\
  i2d(adventure.playerArmor()) >= ceil({difficulty} * 0.39) || if(\
    adventure.hasItem("impaler"), \
    ceil(i2d(adventure.playerAttack()) * 1.1),\
    i2d(adventure.playerAttack())\
  ) >= round({difficulty} * 0.38 + 1.0) + round({difficulty} * 0.08)\
)

; Convert a U/D/R/L direction into a direction vector by using index
; and lookup tables. These are arranged so that if the lookup fails
; (i.e. if the direction is "W" for wait),
; the s2d will default to (0.,0.).
#nextX(d) s2d(sub("X 0 0 1-1", index(" U D R L", {d}, 0), 2), 0.)
#nextY(d) s2d(sub("X 1-1 0 0", index(" U D R L", {d}, 0), 2), 0.)
#nextDir(d) vec({nextX({d})}, {nextY({d})})
