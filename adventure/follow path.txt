:global string leon.adventure.path
:global double leon.adventure.delay
:global int leon.adventure.running

:local int stepCount
:local int curPos
:local string status

#nextDirection sub(leon.adventure.path,stepCount,1)
#xMove(d) ternary.double({d}=="L",-1.,ternary.double({d}=="R",1.,0.))
#yMove(d) ternary.double({d}=="U",1.,ternary.double({d}=="D",-1.,0.))
#move(d) vec({xMove({d})},{yMove({d})})
#nextMove {move({nextDirection})}

#goRight(pos) a.i({pos},"+",1)
#goLeft(pos) a.i({pos},"-",1)
#goUp(pos) a.i({pos},"+",19)
#goDown(pos) a.i({pos},"-",19)
#nextField(d) ternary.int({d}=="U",{goUp(curPos)},ternary.int({d}=="D",{goDown(curPos)},ternary.int({d}=="R",{goRight(curPos)},{goLeft(curPos)})))
#playerPos d2i(x(adventure.playerPos()))+a.i(19,"*",d2i(y(adventure.playerPos())))
#posToVec(x) vec(i2d({x}%19),i2d({x}/19))
#status adventure.entityType({posToVec({nextField({nextDirection})})})

stepCount = -1
loop:
stepCount+=1
goto(ternary.int(stepCount>=len(leon.adventure.path)||leon.adventure.running!=1,end,ternary.int({nextDirection}=="B",bomb,ternary.int({nextDirection}=="W",wait,move))))
move:
	curPos = {playerPos}
    status = {status}
    move2:
	executesync("turbo stop")
    adventure.move({nextMove})
    executesync("turbo start")
  goto(ternary.int(curPos!={playerPos}||status!={status},loop,move2))
bomb:
	executesync("turbo stop")
    adventure.placeBomb()
    executesync("turbo start")
  goto(loop)
wait:
	executesync("turbo stop")
    adventure.wait()
    executesync("turbo start")
  goto(loop)
end:
wait(0.)


